// src/native/char-at.ts
function charAt(str, index) {
  return str.charAt(index);
}

// src/native/join.ts
function join(tuple, delimiter = "") {
  return tuple.join(delimiter);
}

// src/native/concat.ts
function concat(...strings) {
  return join(strings);
}

// src/native/ends-with.ts
function endsWith(text, search, position = text.length) {
  return text.endsWith(search, position);
}

// src/native/includes.ts
function includes(text, search, position = 0) {
  return text.includes(search, position);
}

// src/native/length.ts
function length(str) {
  return str.length;
}

// src/native/pad-end.ts
function padEnd(str, length2 = 0, pad = " ") {
  return str.padEnd(length2, pad);
}

// src/native/pad-start.ts
function padStart(str, length2 = 0, pad = " ") {
  return str.padStart(length2, pad);
}

// src/native/repeat.ts
function repeat(str, times = 0) {
  return str.repeat(times);
}

// src/native/replace.ts
function replace(sentence, lookup, replacement = "") {
  return sentence.replace(lookup, replacement);
}

// src/native/replace-all.ts
function replaceAll(sentence, lookup, replacement = "") {
  if (typeof sentence.replaceAll === "function") {
    return sentence.replaceAll(lookup, replacement);
  }
  const regex = new RegExp(lookup, "g");
  return sentence.replace(regex, replacement);
}

// src/native/slice.ts
function slice(str, start = 0, end = void 0) {
  return str.slice(start, end);
}

// src/native/split.ts
function split(str, delimiter = "") {
  return str.split(delimiter);
}

// src/native/starts-with.ts
function startsWith(text, search, position = 0) {
  return text.startsWith(search, position);
}

// src/native/trim-start.ts
function trimStart(str) {
  return str.trimStart();
}

// src/native/trim-end.ts
function trimEnd(str) {
  return str.trimEnd();
}

// src/native/trim.ts
function trim(str) {
  return str.trim();
}

// src/native/to-lower-case.ts
function toLowerCase(str) {
  return str.toLowerCase();
}

// src/native/to-upper-case.ts
function toUpperCase(str) {
  return str.toUpperCase();
}

// src/utils/reverse.ts
function reverse(str) {
  return str.split("").reverse().join("");
}

// src/utils/truncate.ts
function truncate(sentence, length2, omission = "...") {
  if (length2 < 0) return omission;
  if (sentence.length <= length2) return sentence;
  return join([
    sentence.slice(0, length2 - omission.length),
    omission
  ]);
}

// src/utils/characters/separators.ts
var UNESCAPED_SEPARATORS = [
  "[",
  "]",
  "{",
  "}",
  "(",
  ")",
  "|",
  "/",
  "-",
  "\\"
];
var SEPARATORS = [...UNESCAPED_SEPARATORS, " ", "_", "."];
function escapeChar(char) {
  return UNESCAPED_SEPARATORS.includes(char) ? `\\${char}` : char;
}
var SEPARATOR_REGEX = new RegExp(
  `[${SEPARATORS.map(escapeChar).join("")}]`,
  "g"
);

// src/utils/words.ts
function words(sentence) {
  return sentence.replace(SEPARATOR_REGEX, " ").replace(/([a-zA-Z])([0-9])/g, "$1 $2").replace(/([0-9])([a-zA-Z])/g, "$1 $2").replace(/([a-zA-Z0-9_\-./])([^a-zA-Z0-9_\-./'])/g, "$1 $2").replace(/([^a-zA-Z0-9_\-./'])([a-zA-Z0-9_\-./])/g, "$1 $2").replace(/([a-z])([A-Z])/g, "$1 $2").replace(/([A-Z])([A-Z][a-z])/g, "$1 $2").trim().split(/\s+/g);
}

// src/utils/word-case/capitalize.ts
function capitalize(str) {
  return join([
    toUpperCase(charAt(str, 0) ?? ""),
    slice(str, 1)
  ]);
}

// src/internal/internals.ts
function typeOf(t) {
  return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/, "$1").toLowerCase();
}
function pascalCaseAll(words2) {
  return words2.map((v) => capitalize(toLowerCase(v)));
}

// src/utils/characters/apostrophe.ts
function removeApostrophe(str) {
  return replaceAll(str, "'", "");
}

// src/utils/word-case/pascal-case.ts
function pascalCase(str) {
  return join(pascalCaseAll(words(removeApostrophe(str))));
}
var toPascalCase = pascalCase;

// src/utils/word-case/uncapitalize.ts
function uncapitalize(str) {
  return join([
    toLowerCase(charAt(str, 0) ?? ""),
    slice(str, 1)
  ]);
}

// src/utils/word-case/camel-case.ts
function camelCase(str) {
  return uncapitalize(pascalCase(removeApostrophe(str)));
}
var toCamelCase = camelCase;

// src/utils/word-case/delimiter-case.ts
function delimiterCase(str, delimiter) {
  return join(words(removeApostrophe(str)), delimiter);
}
var toDelimiterCase = delimiterCase;

// src/utils/word-case/constant-case.ts
function constantCase(str) {
  return toUpperCase(delimiterCase(removeApostrophe(str), "_"));
}
var toConstantCase = constantCase;

// src/utils/word-case/kebab-case.ts
function kebabCase(str) {
  return toLowerCase(delimiterCase(removeApostrophe(str), "-"));
}
var toKebabCase = kebabCase;

// src/utils/word-case/snake-case.ts
function snakeCase(str) {
  return toLowerCase(delimiterCase(removeApostrophe(str), "_"));
}
var toSnakeCase = snakeCase;

// src/utils/word-case/title-case.ts
function titleCase(str) {
  return delimiterCase(pascalCase(str), " ");
}
var toTitleCase = titleCase;

// src/utils/word-case/lower-case.ts
function lowerCase(str) {
  return toLowerCase(delimiterCase(str, " "));
}

// src/utils/word-case/upper-case.ts
function upperCase(str) {
  return toUpperCase(delimiterCase(str, " "));
}

// src/utils/object-keys/transform-keys.ts
function transformKeys(obj, transform) {
  if (typeOf(obj) !== "object") return obj;
  const res = {};
  for (const key in obj) {
    res[transform(key)] = obj[key];
  }
  return res;
}

// src/utils/object-keys/camel-keys.ts
function camelKeys(obj) {
  return transformKeys(obj, camelCase);
}

// src/utils/object-keys/constant-keys.ts
function constantKeys(obj) {
  return transformKeys(obj, constantCase);
}

// src/utils/object-keys/delimiter-keys.ts
function delimiterKeys(obj, delimiter) {
  return transformKeys(obj, (str) => delimiterCase(str, delimiter));
}

// src/utils/object-keys/kebab-keys.ts
function kebabKeys(obj) {
  return transformKeys(obj, kebabCase);
}

// src/utils/object-keys/pascal-keys.ts
function pascalKeys(obj) {
  return transformKeys(obj, pascalCase);
}

// src/utils/object-keys/snake-keys.ts
function snakeKeys(obj) {
  return transformKeys(obj, snakeCase);
}

// src/utils/object-keys/replace-keys.ts
function replaceKeys(obj, lookup, replacement = "") {
  return transformKeys(obj, (s) => replace(s, lookup, replacement));
}

// src/utils/object-keys/deep-transform-keys.ts
function deepTransformKeys(obj, transform) {
  if (!["object", "array"].includes(typeOf(obj))) return obj;
  if (Array.isArray(obj)) {
    return obj.map((x) => deepTransformKeys(x, transform));
  }
  const res = {};
  for (const key in obj) {
    res[transform(key)] = deepTransformKeys(obj[key], transform);
  }
  return res;
}

// src/utils/object-keys/deep-camel-keys.ts
function deepCamelKeys(obj) {
  return deepTransformKeys(obj, camelCase);
}

// src/utils/object-keys/deep-constant-keys.ts
function deepConstantKeys(obj) {
  return deepTransformKeys(obj, constantCase);
}

// src/utils/object-keys/deep-delimiter-keys.ts
function deepDelimiterKeys(obj, delimiter) {
  return deepTransformKeys(obj, (str) => delimiterCase(str, delimiter));
}

// src/utils/object-keys/deep-kebab-keys.ts
function deepKebabKeys(obj) {
  return deepTransformKeys(obj, kebabCase);
}

// src/utils/object-keys/deep-pascal-keys.ts
function deepPascalKeys(obj) {
  return deepTransformKeys(obj, pascalCase);
}

// src/utils/object-keys/deep-snake-keys.ts
function deepSnakeKeys(obj) {
  return deepTransformKeys(obj, snakeCase);
}

export { camelCase, camelKeys, capitalize, charAt, concat, constantCase, constantKeys, deepCamelKeys, deepConstantKeys, deepDelimiterKeys, deepKebabKeys, deepPascalKeys, deepSnakeKeys, deepTransformKeys, delimiterCase, delimiterKeys, endsWith, includes, join, kebabCase, kebabKeys, length, lowerCase, padEnd, padStart, pascalCase, pascalKeys, repeat, replace, replaceAll, replaceKeys, reverse, slice, snakeCase, snakeKeys, split, startsWith, titleCase, toCamelCase, toConstantCase, toDelimiterCase, toKebabCase, toLowerCase, toPascalCase, toSnakeCase, toTitleCase, toUpperCase, trim, trimEnd, trimStart, truncate, uncapitalize, upperCase, words };
