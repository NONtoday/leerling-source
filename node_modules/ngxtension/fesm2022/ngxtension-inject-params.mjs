import { inject } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ActivatedRoute } from '@angular/router';
import { assertInjector } from 'ngxtension/assert-injector';
import { map } from 'rxjs';

/**
 * Injects the params from the current route.
 * If a key is provided, it will return the value of that key.
 * If a transform function is provided, it will return the result of that function.
 * Otherwise, it will return the entire params object.
 *
 * @template T - The expected type of the read value.
 * @param keyOrParamsTransform OPTIONAL The key of the param to return, or a transform function to apply to the params object
 * @param {ParamsOptions} options - Optional configuration options for the parameter.
 * @returns {Signal} A `Signal` that emits the transformed value of the specified parameter, or the entire parameters object if no key is provided.
 *
 * @example
 * const userId = injectParams('id'); // returns the value of the 'id' param
 * const userId = injectParams(p => p['id'] as string); // same as above but can be used with a custom transform function
 * const params = injectParams(); // returns the entire params object
 *
 */
function injectParams(keyOrParamsTransform, options = {}) {
  return assertInjector(injectParams, options?.injector, () => {
    const route = inject(ActivatedRoute);
    const params = route.snapshot.params;
    const {
      parse,
      defaultValue
    } = options;
    if (!keyOrParamsTransform) {
      return toSignal(route.params, {
        initialValue: params
      });
    }
    if (typeof keyOrParamsTransform === 'function') {
      return toSignal(route.params.pipe(map(keyOrParamsTransform)), {
        initialValue: keyOrParamsTransform(params)
      });
    }
    const getParam = params => {
      const param = params?.[keyOrParamsTransform];
      if (!param) {
        return defaultValue ?? null;
      }
      return parse ? parse(param) : param;
    };
    return toSignal(route.params.pipe(map(getParam)), {
      initialValue: getParam(params)
    });
  });
}

/**
 * Generated bundle index. Do not edit.
 */

export { injectParams };
