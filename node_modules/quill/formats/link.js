import Inline from '../blots/inline.js';
let Link = /*#__PURE__*/(() => {
  class Link extends Inline {
    static blotName = 'link';
    static tagName = 'A';
    static SANITIZED_URL = 'about:blank';
    static PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel', 'sms'];
    static create(value) {
      const node = super.create(value);
      node.setAttribute('href', this.sanitize(value));
      node.setAttribute('rel', 'noopener noreferrer');
      node.setAttribute('target', '_blank');
      return node;
    }
    static formats(domNode) {
      return domNode.getAttribute('href');
    }
    static sanitize(url) {
      return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
    }
    format(name, value) {
      if (name !== this.statics.blotName || !value) {
        super.format(name, value);
      } else {
        // @ts-expect-error
        this.domNode.setAttribute('href', this.constructor.sanitize(value));
      }
    }
  }
  return Link;
})();
function sanitize(url, protocols) {
  const anchor = document.createElement('a');
  anchor.href = url;
  const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
  return protocols.indexOf(protocol) > -1;
}
export { Link as default, sanitize };
